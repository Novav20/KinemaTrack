@model RobotArmDto
@{
    ViewData["Title"] = "Robot Arm Details";
}

<h1>@Model.Name</h1>
<p class="text-muted">Details for the selected robot arm</p>
<hr />

<!-- Start of the two-column layout -->
<div class="row">

    <!-- ===== LEFT COLUMN ===== -->
    <!-- This column will hold the arm details and the joint list -->
    <div class="col-md-5">

        <!-- Card for Arm Details -->
        <div class="card mb-3">
            <div class="card-header">Description</div>
            <div class="card-body">
                <p class="card-text">@Model.Description</p>
            </div>
        </div>

        <!-- Card for Joints List -->
        <div class="card">
            <div class="card-header">Joints</div>
            <div class="card-body">
                <!-- A "Create New Joint" button goes here nicely -->
                <a asp-action="AddJoint" asp-route-robotArmId="@Model.Id" class="btn btn-sm btn-primary mb-3">Add
                    Joint</a>
                @*
                 <table class="table table-sm">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Angle (°)</th>
                            <th>Length (mm)</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var joint in Model.Joints)
                        {
                            <tr>
                                <td>@joint.JointNumber</td>
                                <td>@joint.AngleInDegrees</td>
                                <td>@joint.LinkLength</td>
                            </tr>

                        }
                    </tbody>
                </table> 
*@
                @foreach (var joint in Model.Joints)
                {
                    <div class="mb-3">
                        <label>Joint @joint.JointNumber Angle (°):</label>
                        <input type="range" class="form-range joint-slider" min="-180" max="180" value="@joint.AngleInDegrees" data-joint-id="@joint.Id">
                        <span id="angle-readout-@joint.JointNumber">@joint.AngleInDegrees</span>
                    </div>
                }
            </div>
        </div>
    </div>


    <!-- ===== RIGHT COLUMN ===== -->
    <!-- This column will hold the canvas for visualization -->
    <div class="col-md-7">
        <div class="card">
            <div class="card-header">
                Visualization
            </div>
            <div class="card-body text-center"> <!-- text-center can help center the canvas if its smaller -->
                <canvas id="robot-canvas" width="600" height="600" style="border: 1px solid #d3d3d3"></canvas>
            </div>
        </div>
    </div>
</div>

<script>
    const armData = @Json.Serialize(Model);

    console.log("Robot Arm Data:", armData);

    const canvas = document.getElementById('robot-canvas');
    const ctx = canvas.getContext('2d');

    const originX = canvas.width / 2;
    const originY = canvas.height - 50; // 50 px from the bottom

    function drawArm() {
        // Start with a clean canvas every time we draw
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // Initialize our "pen" position and starting angle
        let currentX = originX;
        let currentY = originY;
        let currentAngle = -Math.PI / 2; // Start pointing straight up (Y-axis is inverted)

        // Style the lines
        ctx.strokeStyle = '#333';
        ctx.lineWidth = 5;

        // Draw the Base of the Robot
        ctx.beginPath();
        ctx.arc(originX, originY, 10, 0, 2 * Math.PI);
        ctx.fillStyle = '#6c757d';
        ctx.fill();

        // Loop through each joint from our C# model data
        armData.joints.forEach(joint => {
            currentAngle += joint.angleInRadians;

            const endX = currentX + joint.linkLength * Math.cos(currentAngle);
            const endY = currentY + joint.linkLength * Math.sin(currentAngle);

            // Draw the link
            ctx.beginPath();
            ctx.moveTo(currentX, currentY);
            ctx.lineTo(endX, endY);
            ctx.stroke();

            // Draw a small circle for the joint
            ctx.beginPath();
            ctx.arc(endX, endY, 7, 0, 2 * Math.PI);
            ctx.fillStyle = 'blue';
            ctx.fill();

            // Update the starting point for the *next* link
            currentX = endX;
            currentY = endY;
        });
    }

    drawArm();
</script>